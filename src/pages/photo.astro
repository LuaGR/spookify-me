---
import Layout from '../layouts/Layout.astro'
import Header from '../components/photo/components/header-photo.astro'
import Suggestions from '../components/photo/components/suggestions.astro'
import Download from '../components/photo/components/download.astro'
import CustomPrompt from '../components/photo/components/custom-prompt.astro'
import { getCldImageUrl } from 'astro-cloudinary/helpers'
import Alien from '../components/photo/icons/alien.astro'
import Phantom from '../components/photo/icons/phantom.astro'
import Zombie from '../components/photo/icons/zombie.astro'

const { searchParams } = Astro.url
const id = searchParams.get('id')

if (id == null) return Astro.redirect('/')

const url = getCldImageUrl({ src: id })
console.log({ id, url })
---

<Layout title='Spooky Photo'>
  <Header />

  <main
    data-id={id}
    class='w-full flex flex-col items-center justify-center gap-16 max-w-[1200px] p-12'>
    <div class='grid grid-cols-1 md:grid-cols-2 gap-12 items-center w-full'>
      <section class='flex justify-center items-center relative'>
        <img
          id='preview'
          src={url}
          class='size-80 max-w-full h-auto rounded-lg transition-opacity duration-300 ease-in-out'
        />

        <div
          role='status'
          id='loadingMessage'
          class='loading-message hidden text-center w-full absolute'>
          <svg
            aria-hidden='true'
            class='inline w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-yellow-400'
            viewBox='0 0 100 101'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'>
            <path
              d='M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z'
              fill='currentColor'
            ></path>
            <path
              d='M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z'
              fill='currentFill'
            ></path>
          </svg>
          <span class='sr-only'>Loading...</span>
        </div>
      </section>

      <section class='flex flex-col size-full gap-12 sm:gap-24 items-start'>
        <CustomPrompt>
          <input
            type='text'
            id='customPrompt'
            placeholder='Add monsters to the background...'
            class='border p-2 rounded-lg w-full bg-white/80 focus:border-purple-500 text-[#342042] outline-none'
          />
          <button
            id='sendPrompt'
            class='bg-[#f97c1e] px-4 py-2 rounded-lg hover:bg-orange-600'>
            Apply
          </button>
        </CustomPrompt>

        <Suggestions>
          <section class='grid grid-cols-2 sm:flex justify-start w-full gap-4'>
            <button
              class='add bg-[#f97c1e] px-4 py-2 rounded-lg hover:bg-orange-600 flex items-center justify-center gap-2'
              data-topic='ghost'>
              Phantoms
              <Phantom />
            </button>

            <button
              class='add bg-[#f97c1e] px-4 py-2 rounded-lg hover:bg-orange-600 flex items-center gap-2 justify-center'
              data-topic='zombies'>
              Zombies
              <Zombie />
            </button>

            <button
              class='add bg-[#f97c1e] px-4 py-2 rounded-lg hover:bg-orange-600 flex items-center gap-2 justify-center'
              data-topic='aliens'>
              Aliens
              <Alien />
            </button>
          </section>
        </Suggestions>
      </section>
    </div>
    <footer class='flex justify-center items-center gap-8 p-6'>
      <Download />
      <a
        href='/'
        class='px-4 py-2 rounded-lg hover:bg-[#d9abe6] border whitespace-nowrap border-[#d9abe6]'
        >Back to Home</a
      >
    </footer>

    <style>
      .fade-in {
        animation: fadeIn ease 1s;
        opacity: 1;
      }

      .hidden {
        display: none;
      }

      .loading-message {
        color: #f97c1e; /* Ajusta el color según sea necesario */
        font-weight: bold;
      }

      @keyframes fadeIn {
        0% {
          opacity: 0;
        }
        100% {
          opacity: 1;
        }
      }

      @media (min-width: 768px) {
        .grid {
          grid-template-columns: 1fr 1fr;
        }
      }
    </style>

    <script>
      import { getCldImageUrl } from 'astro-cloudinary/helpers'

      const id = document.querySelector('main')?.getAttribute('data-id') ?? ''
      const preview = document.getElementById('preview') as HTMLImageElement
      const loadingMessage = document.getElementById(
        'loadingMessage'
      ) as HTMLParagraphElement
      const buttons = document.querySelectorAll('button')
      const downloadButton = document.querySelector(
        '.download'
      ) as HTMLButtonElement
      const customPromptInput = document.getElementById(
        'customPrompt'
      ) as HTMLInputElement
      const sendPromptButton = document.getElementById(
        'sendPrompt'
      ) as HTMLButtonElement

      const TOPICS: Record<string, string> = {
        ghost: 'Add scary ghosts to the background',
        zombies: 'Add zombies to the background',
        aliens: 'Add aliens to the background'
      } as const

      let selectedTopic = ''

      function applyAnimation(image: HTMLImageElement) {
        image.classList.remove('fade-in')
        void image.offsetWidth
        image.classList.add('fade-in')
      }

      async function loadImage(url: string) {
        loadingMessage.classList.remove('hidden') // Mostrar el mensaje de carga
        preview.style.opacity = '.3' // Disminuir la opacidad de la imagen

        return new Promise<void>((resolve) => {
          preview.onload = () => {
            preview.style.opacity = '1' // Restaurar opacidad al cargar
            loadingMessage.classList.add('hidden') // Ocultar el mensaje de carga
            resolve()
          }
          preview.src = url // Asignar la nueva URL a la imagen
        })
      }

      buttons.forEach((button) => {
        button.addEventListener('click', async (e) => {
          const topic = button.getAttribute('data-topic')
          if (topic == null) return

          selectedTopic = TOPICS[topic]
          const url = getCldImageUrl({
            src: id,
            replaceBackground: selectedTopic,
            brightness: '-30',
            contrast: true
          })

          await loadImage(url) // Llamar a la función para cargar la imagen
          applyAnimation(preview)
        })
      })

      sendPromptButton.addEventListener('click', async (e) => {
        const customPrompt = customPromptInput.value.trim()

        if (customPrompt === '') return

        selectedTopic = customPrompt

        const url = getCldImageUrl({
          src: id,
          replaceBackground: customPrompt,
          brightness: '-30',
          contrast: true
        })

        await loadImage(url) // Llamar a la función para cargar la imagen
        applyAnimation(preview)
      })

      downloadButton.addEventListener('click', async (e) => {
        const customPrompt = customPromptInput.value.trim()

        const transformedUrl = getCldImageUrl({
          src: id,
          replaceBackground: selectedTopic || customPrompt || '',
          brightness: '-30',
          contrast: true
        })

        try {
          const response = await fetch(transformedUrl, { mode: 'cors' })
          const blob = await response.blob()

          const downloadLink = document.createElement('a')
          const url = URL.createObjectURL(blob)
          downloadLink.href = url
          downloadLink.download = 'image.webp'
          document.body.appendChild(downloadLink)
          downloadLink.click()

          document.body.removeChild(downloadLink)
          URL.revokeObjectURL(url)
        } catch (error) {
          console.error('Error downloading the image:', error)
        }
      })
    </script>
  </main></Layout
>
